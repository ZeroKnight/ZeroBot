"""Utility functions and classes useful for module creation."""

from argparse import ArgumentParser
from typing import Optional

from . import abc


class NoExitArgumentParser(ArgumentParser):
    """Modified `argparse.ArgumentParser` that doesn't exit on errors."""

    # NOTE: Python 3.9 will add an `exit_on_error` parameter that will stop
    # argparse from exiting instead of having to override exit and error.

    def exit(self, status=0, message=None):
        pass

    def error(self, message):
        raise Exception(f'{self.prog}: {message}')


def new_cmd_parser(name: str, description: Optional[str] = None,
                   usage: Optional[str] = None) -> NoExitArgumentParser:
    """Create a new `ArgumentParser` object tailored for ZeroBot commands.

    Notes
    -----
    The returned `ArgumentParser` is actually a small subclass that doesn't
    exit on errors and help like the normal class does. This won't be necessary
    in Python 3.9, as it will add a `exit_on_error` parameter that can disable
    this behavior without needing to subclass.

    Parameters
    ----------
    name : str
        The name of the command.
    description : str, optional
        A short description of the command. May be omitted.
    usage : str, optional
        The text shown as the "usage" line in the command's help text. If
        omitted, it will be automatically generated by `argparse`.
    """
    # NOTE: Might be able to make use of formatter_class if need be
    return NoExitArgumentParser(
        prog=name, usage=usage, description=description, add_help=False)
